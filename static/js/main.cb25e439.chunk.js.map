{"version":3,"sources":["components/creature.js","components/creature_list.js","components/search_bar.js","components/enemy_count_scaler.js","components/encounter_xp.js","components/encounter.js","components/party_members.js","index.js"],"names":["Creature","props","creature","name","CR","creature_size","className","waves","small","onClick","crToFind","count","stats","STATS","find","data","add","remove","CreatureList","creatures","list","map","key","SearchBar","id","type","onChange","keywords","htmlFor","EnemyCountScaler","state","calculatedXp","calculateNewXp","event","monsters","length","result","oldCount","parseInt","target","value","setState","getXP","players","getEnemySliders","monster","label","max","min","defaultValue","e","this","difficulty","Component","EncounterXP","getXpTotalForCreature","XP","getXpMultiplier","enemyCount","playerCount","multiplierIndex","getXpTotalForEncounter","xpTotal","countTotal","forEach","getDifficulty","encounterXP","threshold","DIFFICULTY","playerLevel","easy","Easy","medium","Medium","hard","Hard","deadly","Deadly","Math","round","fourPlayerEncounterXP","Encounter","encounterCreatures","encounter","clearEncounter","PartyMembers","placeholder","setPlayers","data-error","setPlayerLevel","App","searchTerm","monsterList","JSON","filtered","encounterList","getFilteredResultsByKeyword","keyword","toLowerCase","filter","indexOf","showFilterResults","filteredResults","addToEncounter","newEntry","removeFromEncounter","filteredArray","item","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.cb25e439.chunk.js","sourcesContent":["import React from 'react'\nimport STATS from '../data/stats_by_cr.json'\nimport { Button } from 'react-materialize';\n\n\nconst Creature = (props) => {\n\n    const creatureStats = (crToFind) => {\n        let obj = STATS.find(data => data.CR === crToFind);\n        return obj\n    }\n\n    return (\n        <tr>\n            <td>{props.creature.name}</td>\n            <td>{props.creature.CR}</td>\n            <td>{props.creature.creature_size}</td>\n            <td>\n                <Button className=\"add-button blue-grey\" waves='light' small={true} onClick={() => {\n                        props.creature.count = props.creature.count || 0 ;\n                        props.creature.count += 1;\n                        props.creature.stats = creatureStats(props.creature.CR)\n                        props.add(props.creature);\n                    }}\n                >+</Button>\n\n                <Button className=\"subtract-button blue-grey\" waves='light' small={true} onClick={() => {\n                        if (props.creature.count > 0){\n                            props.creature.count -= 1;\n                        }\n                        props.remove(props.creature)\n                    }}\n                >-</Button>\n            </td>\n        </tr>\n    )\n}\n\nexport default Creature;\n","import React from 'react';\n\n//COMPONENTS\nimport Creature from './creature'\n\nconst CreatureList = (props) => {\n\n        const creatures = props.list.map((creature) => {\n            return (\n                <Creature key={creature.name} creature={creature} add={props.add} remove={props.remove}/>\n            )\n        });\n\n        return(\n            <div className=\"row\">\n                    <table className='list'>\n                        <thead>\n                            <tr>\n                                <th>Name</th>\n                                <th>CR</th>\n                                <th>Size</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {creatures}\n                        </tbody>\n                    </table>\n            </div>\n        )\n    } \n\n\nexport default CreatureList;","import React from 'react';\n\nconst SearchBar = (props) => {\n        return(\n            <form>\n                <div className=\"row\">\n                    <div className=\"input-field col s12\">\n                        <i className=\"material-icons prefix\">search</i>\n                        <input id=\"icon_prefix\" type=\"text\" className=\"validate\" onChange={props.keywords}/>\n                        <label htmlFor=\"icon_prefix\">Search</label>\n                    </div>\n                </div>\n            </form>\n        )\n}\n\nexport default SearchBar;","import React, { Component } from 'react';\nimport { Range } from 'react-materialize';\n\nclass EnemyCountScaler extends Component {\n\n        state = {\n            calculatedXp: 0\n        }\n\n        calculateNewXp = (event, creature) => {\n            if (this.props.monsters.length > 0) {\n                let list = this.props.monsters\n                const result = list.find( ({ name }) => name === creature.name );\n                const oldCount = result.count\n                result.count = parseInt(event.target.value)\n                this.setState({\n                    calculatedXp: this.props.getXP(list, this.props.players)\n                })\n                result.count = oldCount\n            }\n        }\n\n        getEnemySliders = () => {\n            let enemies = this.props.monsters.map((monster) => {\n                return (\n                    <div key={monster.name}> \n                        <label>{monster.name}</label>\n                        <Range \n                            label={monster.name}\n                            max=\"20\" min=\"0\" \n                            name=\"enemies\"  \n                            defaultValue=\"0\"\n                            onChange={(e) => this.calculateNewXp(e, monster)}/>\n                    </div>\n                )\n            }) \n            return enemies\n        }\n\n        render(){\n\n            return(\n                <div>\n                    <strong>Add/Remove enemies</strong>\n                    <div>XP for {this.props.players} players: \n                        <span className='newxp'> {this.props.monsters.length > 0 ? this.state.calculatedXp : ''} {'' + this.props.monsters.length > 0 ? this.props.difficulty(this.state.calculatedXp) : ''}</span>\n                    </div>\n                    <div>{this.getEnemySliders()}</div>\n                </div>\n            )\n        }\n}\n\nexport default EnemyCountScaler;","import React, { Component } from 'react';\n\n//Data needed\nimport DIFFICULTY from '../data/difficulty_chart.json'\n\n//COMPONENTS\nimport EnemyCountScaler from './enemy_count_scaler'\n\nclass EncounterXP extends Component {\n\n        getXpTotalForCreature = (creature) => {\n            let xp = creature.stats.XP * creature.count\n            return xp\n        }\n\n        getXpMultiplier = (enemyCount, playerCount) => {\n            const multipliers = [0.5, 1, 1.5, 2, 2.5, 3, 4, 5]\n            let multiplierIndex = 1\n\n            if (enemyCount === 2) {\n                multiplierIndex = 2\n            } else if (enemyCount >= 3 && enemyCount <= 6 ){\n                multiplierIndex = 3\n            } else if (enemyCount >= 7 && enemyCount <= 10 ) {\n                multiplierIndex = 4\n            } else if (enemyCount >= 11 && enemyCount <= 14 ) {\n                multiplierIndex = 5\n            } else if (enemyCount >= 15 ) {\n                multiplierIndex = 6\n            } else {\n                multiplierIndex = 1\n            }\n\n            if (playerCount < 3) {\n                multiplierIndex += 1\n            } else if (playerCount > 5 && enemyCount === 1) {\n                multiplierIndex = 0\n            } else if (playerCount > 5 && multiplierIndex > 1) {\n                multiplierIndex -= 1\n            } \n\n            return multipliers[multiplierIndex]\n        }\n\n        getXpTotalForEncounter = (monsters, players) => {\n            let xpTotal = 0\n            let countTotal = 0\n            monsters.forEach(creature => {\n                countTotal = countTotal + creature.count\n                xpTotal    = xpTotal + this.getXpTotalForCreature(creature)\n            });\n            xpTotal = xpTotal * this.getXpMultiplier(countTotal, players)\n            return xpTotal\n        }\n\n        getDifficulty = (encounterXP) => {\n            const threshold = DIFFICULTY[this.props.playerLevel]\n            let difficulty = ''\n\n            const easy   = threshold.Easy   * this.props.players\n            const medium = threshold.Medium * this.props.players\n            const hard   = threshold.Hard   * this.props.players\n            const deadly = threshold.Deadly * this.props.players\n    \n            if (encounterXP < easy && encounterXP > 0) {\n                difficulty = \"Trivial\"\n            } else if (encounterXP >= easy && encounterXP < medium) {\n                difficulty = \"Easy\"\n            } else if (encounterXP >= medium && encounterXP < hard) {\n                difficulty = \"Medium\"\n            } else if (encounterXP >= hard && encounterXP < deadly) {\n                difficulty = \"Hard\"\n            } else if (encounterXP >= deadly && encounterXP < deadly * 2) {\n                difficulty = \"Deadly\"\n            } else if (encounterXP >= deadly * 2) {\n                difficulty = `${Math.round( encounterXP/deadly * 10 ) / 10}x more than Deadly`\n            }\n\n            if (encounterXP === 0) {\n                return ''\n            } else {\n                return difficulty\n            }\n        }\n\n        render(){\n            let encounterXP = this.getXpTotalForEncounter(this.props.monsters[0], this.props.players)\n            let fourPlayerEncounterXP = this.getXpTotalForEncounter(this.props.monsters[0], 4)\n        \n            return(\n                <div>\n                    <div><strong>Player Level: {this.props.playerLevel}</strong></div>\n\n                    <div className='col s6'>\n                        <div>Encounter XP for 4 players: {fourPlayerEncounterXP}</div>\n                        <div>Difficulty for 4 players: {this.getDifficulty(fourPlayerEncounterXP)}</div>\n                    </div>\n                    <div className='col s6'>\n                        <div>Encounter XP for {this.props.players} players: {encounterXP}</div>\n                        <div>Difficulty for {this.props.players} players: {this.getDifficulty(encounterXP)}</div>\n                    </div>                    \n                    <hr></hr>\n                    <div>\n                        <h5 className='adjustment-title'>Adjustment Options</h5>\n                        <EnemyCountScaler \n                            getXP={this.getXpTotalForEncounter} \n                            difficulty={this.getDifficulty}\n                            monsters={this.props.monsters[0]}\n                            players={this.props.players}/>\n                    </div>\n                </div>\n            )\n        }\n}\n\nexport default EncounterXP;","import React, { Component } from 'react';\n\n//COMPONENTS\nimport EncounterXP from './encounter_xp';\nimport { Collection, CollectionItem } from 'react-materialize';\n\nclass Encounter extends Component {\n\n        render() {\n            const encounterCreatures = this.props.encounter.map( (creature) => {\n                return <CollectionItem key={creature.name}>{creature.name} x {creature.count}</CollectionItem>\n            });\n\n            return(\n                <div className='encounter'>\n                    <div className='encounter-title'>\n                        <h5>Encounter</h5>\n                        <span className=\"btn-flat\" onClick={this.props.clearEncounter}>Clear</span>\n                    </div>\n                    <Collection>\n                        {encounterCreatures}    \n                    </Collection>\n                    <div>\n                        <EncounterXP \n                            monsters={[this.props.encounter]} \n                            players={this.props.players}\n                            playerLevel={this.props.playerLevel}/>\n                    </div>\n                </div>\n        )\n    }\n}\n\nexport default Encounter;","import React from 'react';\n\nconst PartyMembers = (props) => {\n        return(\n            <div className='party'>\n                <h5>Party Members</h5>\n                <div className='row'> \n                    <div className=\"input-field col s4\">\n                        <input placeholder=\"4\" min=\"1\" max=\"10\" id=\"partyNum\" type=\"number\" className=\"validate\" onChange={props.setPlayers}/>\n                        <label htmlFor=\"partyNum\">Number of characters:</label>\n                        <span className=\"helper-text\" data-error=\"Must be a number between 1 and 10\"></span>\n                    </div>\n                    <div className=\"input-field col s4\">\n                        <input placeholder=\"1\" min=\"1\" max=\"20\" id=\"partyLevel\" type=\"number\" className=\"validate\" onChange={props.setPlayerLevel}/>\n                        <label htmlFor=\"partyLevel\">Average character level:</label>\n                        <span className=\"helper-text\" data-error=\"Must be a number between 1 and 20\"></span>\n                    </div>\n                </div>\n                \n            </div>\n        )\n}\n\nexport default PartyMembers;","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport JSON from './data/creatures.json'\nimport './index.css';\n\n//COMPONENTS\nimport CreatureList from './components/creature_list'\nimport SearchBar from './components/search_bar'\nimport Encounter from './components/encounter'\nimport PartyMembers from './components/party_members'\n\n\nclass App extends Component {\n\n    state = {\n        searchTerm: '',\n        monsterList: JSON,\n        filtered: [],\n        encounterList: [],\n        players: 1,\n        playerLevel: 1\n    }\n\n    getFilteredResultsByKeyword = (event) => {\n        let keyword = event.target.value.toLowerCase()\n        let filtered = this.state.monsterList.filter((monster) => {\n            return monster.name.toLowerCase().indexOf(keyword) > -1\n        });\n\n        this.setState({\n            filtered\n        })\n\n        this.setState({\n            searchTerm:keyword\n        })\n    }\n\n    showFilterResults = (filteredResults) => {\n        if (filteredResults.length === 0 && this.state.searchTerm.length > 0){\n            return [];\n        } else if (filteredResults.length > 0){\n            return this.state.filtered;\n        } else {\n            return this.state.monsterList;\n        }\n    }\n\n    addToEncounter = (newEntry) => {\n        this.setState({ encounterList: [...this.state.encounterList, newEntry] })\n        if (this.state.encounterList.indexOf(newEntry) === -1) {\n            this.setState({ encounterList: [...this.state.encounterList, newEntry] })\n        } else {\n            this.setState({ encounterList: this.state.encounterList })\n        }\n    }\n\n    removeFromEncounter = (newEntry) => {\n        let filteredArray;\n        if (newEntry.count === 0){\n            filteredArray = this.state.encounterList.filter(item => item !== newEntry)\n        } else {\n            filteredArray = this.state.encounterList\n        }\n        this.setState({encounterList: filteredArray});\n    }\n\n    clearEncounter = () => { \n        this.state.encounterList.forEach((creature) => {\n            delete creature.count\n        })\n        this.setState({encounterList: []})\n    }\n\n    setPlayers = (event) => {\n        if (event.target.value >= 1 && event.target.value <= 10) {\n            this.setState({players:event.target.value}) \n        }\n    }\n\n    setPlayerLevel = (event) => {\n         if (event.target.value >= 1 && event.target.value <= 20) {\n             this.setState({playerLevel:event.target.value}) \n        }\n    }\n\n    render() {\n        return(\n                <div className=\"row\">\n                    <div className=\"col s6\">\n                        <PartyMembers \n                            setPlayers={this.setPlayers} \n                            setPlayerLevel={this.setPlayerLevel}/>\n                        <SearchBar keywords={this.getFilteredResultsByKeyword}/>\n                        <CreatureList \n                            list      = {this.showFilterResults(this.state.filtered)}\n                            encounter = {this.state.encounterList} \n                            add       = {this.addToEncounter}\n                            remove    = {this.removeFromEncounter}\n                        />\n                    </div>\n                    <div className=\"col s6\">\n                        <Encounter \n                            encounter      = {this.state.encounterList} \n                            clearEncounter = {this.clearEncounter}\n                            setPlayers     = {this.setPlayers} \n                            setPlayerLevel = {this.setPlayerLevel}\n                            players        = {this.state.players}\n                            playerLevel    = {this.state.playerLevel}/>\n                    </div>\n                </div>\n        )\n    }\n}\n\nReactDOM.render(<App/>, document.querySelector('#root'))"],"sourceRoot":""}